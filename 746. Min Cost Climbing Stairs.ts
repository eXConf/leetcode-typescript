function minCostClimbingStairs(cost: number[]): number {
  const len = cost.length;
  const memo = new Map<number, number>();

  function dp(idx: number): number {
    if (memo.has(idx)) return memo.get(idx)!;
    if (idx >= len) {
      return 0;
    }

    const min = Math.min(cost[idx] + dp(idx + 1), cost[idx] + dp(idx + 2));
    memo.set(idx, min);
    return min;
  }
  return Math.min(dp(0), dp(1));
}

console.log(minCostClimbingStairs([10, 15, 20])); // 15
console.log(minCostClimbingStairs([1, 100, 1, 1, 1, 100, 1, 1, 100, 1])); // 6
console.log(
  minCostClimbingStairs([
    1, 100, 1, 1, 1, 100, 1, 1, 100, 1, 1, 100, 1, 1, 1, 100, 1, 1, 100, 1, 100,
    1, 1, 1, 100, 1, 1, 100, 1, 100, 1, 1, 1, 100, 1, 1, 100, 1, 100, 1, 1, 1,
    100, 1, 1, 100, 1, 100, 1, 1, 1, 100, 1, 1, 100, 1, 100, 1, 1, 1, 100, 1, 1,
    100, 1, 100, 1, 1, 1, 100, 1, 1, 100, 1, 100, 1, 1, 1, 100, 1, 1, 100, 1,
    100, 1, 1, 1, 100, 1, 1, 100, 1, 100, 1, 1, 1, 100, 1, 1, 100, 1, 100, 1, 1,
    1, 100, 1, 1, 100, 1, 100, 1, 1, 1, 100, 1, 1, 100, 1, 100, 1, 1, 1, 100, 1,
    1, 100, 1, 100, 1, 1, 1, 100, 1, 1, 100, 1, 100, 1, 1, 1, 100, 1, 1, 100, 1,
    100, 1, 1, 1, 100, 1, 1, 100, 1, 100, 1, 1, 1, 100, 1, 1, 100, 1, 100, 1, 1,
    1, 100, 1, 1, 100, 1, 100, 1, 1, 1, 100, 1, 1, 100, 1, 100, 1, 1, 1, 100, 1,
    1, 100, 1, 100, 1, 1, 1, 100, 1, 1, 100, 1, 100, 1, 1, 1, 100, 1, 1, 100, 1,
    100, 1, 1, 1, 100, 1, 1, 100, 1, 100, 1, 1, 1, 100, 1, 1, 100, 1, 100, 1, 1,
    1, 100, 1, 1, 100, 1, 100, 1, 1, 1, 100, 1, 1, 100, 1, 100, 1, 1, 1, 100, 1,
    1, 100, 1, 100, 1, 1, 1, 100, 1, 1, 100, 1, 100, 1, 1, 1, 100, 1, 1, 100, 1,
    100, 1, 1, 1, 100, 1, 1, 100, 1, 100, 1, 1, 1, 100, 1, 1, 100, 1, 100, 1, 1,
    1, 100, 1, 1, 100, 1, 100, 1, 1, 1, 100, 1, 1, 100, 1, 100, 1, 1, 1, 100, 1,
    1, 100, 1, 100, 1, 1, 1, 100, 1, 1, 100, 1, 100, 1, 1, 1, 100, 1, 1, 100, 1,
    100, 1, 1, 1, 100, 1, 1, 100, 1, 100, 1, 1, 1, 100, 1, 1, 100, 1, 100, 1, 1,
    1, 100, 1, 1, 100, 1, 100, 1, 1, 1, 100, 1, 1, 100, 1, 100, 1, 1, 1, 100, 1,
    1, 100, 1, 100, 1, 1, 1, 100, 1, 1, 100, 1, 100, 1, 1, 1, 100, 1, 1, 100, 1,
    100, 1, 1, 1, 100, 1, 1, 100, 1, 100, 1, 1, 1, 100, 1, 1, 100, 1, 100, 1, 1,
    1, 100, 1, 1, 100, 1, 100, 1, 1, 1, 100, 1, 1, 100, 1, 100, 1, 1, 1, 100, 1,
    1, 100, 1, 100, 1, 1, 1, 100, 1, 1, 100, 1, 100, 1, 1, 1, 100, 1, 1, 100, 1,
    100, 1, 1, 1, 100, 1, 1, 100,
  ]),
); // 261
